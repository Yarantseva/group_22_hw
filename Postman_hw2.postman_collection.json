{
	"info": {
		"_postman_id": "41abb071-ee90-4542-a45f-2a7947467fd0",
		"name": "Postman_hw2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "#1_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Mary",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwerty",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "#2_user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"let salary = jsonData.start_qa_salary\r",
							"let salary_6m = jsonData.qa_salary_after_6_months\r",
							"let salary_12m = jsonData.qa_salary_after_12_months\r",
							"let salary_1_5y = jsonData.person.u_salary_1_5_year\r",
							"\r",
							"// console.log(salary)\r",
							"// console.log(salary_6m)\r",
							"// console.log(salary_12m)\r",
							"// console.log(salary_1_5y)\r",
							"\r",
							"\r",
							"//Test_1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//Test_2\r",
							"let Ajv = require(\"ajv\"),\r",
							"    ajv = new Ajv({logger: console});\r",
							"    schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"person\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"u_age\": {\r",
							"                        \"type\": \"number\"},\r",
							"                    \"u_name\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"items\": [\r",
							"                           {                                \r",
							"                            \"type\": \"string\"\r",
							"                           },\r",
							"                           {\r",
							"                            \"type\": \"number\"\r",
							"                           },\r",
							"                           {\r",
							"                               \"type\": \"number\"\r",
							"                           }\r",
							"                        ]\r",
							"                    },\r",
							"                    \"u_salary_1_5_year\": {\r",
							"                        \"type\": \"number\"\r",
							"                    }\r",
							"                },\r",
							"                \"required\": [\r",
							"                    \"u_age\",\r",
							"                    \"u_name\",\r",
							"                    \"u_salary_1_5_year\"\r",
							"                ]\r",
							"            },\r",
							"            \"qa_salary_after_12_months\": {\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"qa_salary_after_6_months\": {\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"start_qa_salary\": {\r",
							"                \"type\": \"number\"\r",
							"            }\r",
							"        },\r",
							"        \"required\": [\r",
							"            \"person\",\r",
							"            \"qa_salary_after_12_months\",\r",
							"            \"qa_salary_after_6_months\",\r",
							"            \"start_qa_salary\"\r",
							"        ]\r",
							"    }\r",
							"\r",
							"pm.test(\"Schema is valid\", function(){\r",
							"    pm.expect(ajv.validate(schema, pm.response.json())).to.be.true\r",
							"});\r",
							"\r",
							"\r",
							"//Test_3\r",
							"pm.test(\"Check_salary_6m\", function () {\r",
							"    pm.expect(salary_6m).to.eql(salary*2);\r",
							"});\r",
							"pm.test(\"Check_salary_12m\", function () {\r",
							"    pm.expect(salary_12m).to.eql(salary*2.9);\r",
							"});\r",
							"pm.test(\"Check_salary_1_5y\", function () {\r",
							"    pm.expect(salary_1_5y).to.eql(salary*4);\r",
							"});\r",
							"\r",
							"\r",
							"//Test_4\r",
							"pm.environment.set(\"salary\", salary_1_5y);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 35,\r\n    \"salary\": 1000,\r\n    \"name\": \"Mary\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "#3_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"let salary = jsonData.salary[0]\r",
							"let salary_2 = +jsonData.salary[1]\r",
							"let salary_3 = +jsonData.salary[2]\r",
							"\r",
							"\r",
							"//Test_1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//Test_2\r",
							"let Ajv = require(\"ajv\"),\r",
							"    ajv = new Ajv({logger: console});\r",
							"    schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": [\r",
							"                {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ]\r",
							"}\r",
							"pm.test(\"Schema is valid\", function(){\r",
							"    pm.expect(ajv.validate(schema, pm.response.json())).to.be.true\r",
							"});\r",
							"\r",
							"\r",
							"//Test_3\r",
							"pm.test(\"Check_salary\", function () {\r",
							"       pm.expect(salary).to.eql(+pm.request.body.formdata.get(\"salary\"));\r",
							"});\r",
							"pm.test(\"Check_salary_2\", function () {\r",
							"       pm.expect(salary_2).to.eql(salary*2);\r",
							"});\r",
							"pm.test(\"Check_salary_3\", function () {\r",
							"       pm.expect(salary_3).to.eql(salary*3);\r",
							"});\r",
							"\r",
							"\r",
							"//Test_4\r",
							"pm.test(\"Salary_3 more then salary\", function () {\r",
							"       pm.expect(salary_3).to.have.above(salary);\r",
							"});\r",
							"pm.test(\"Salary_3 more then salary_2\", function () {\r",
							"       pm.expect(salary_3).to.have.above(salary_2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Mary",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "#4_test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json()\r",
							"\r",
							"let weight = pm.request.body.formdata.get(\"weight\")\r",
							"console.log(weight);\r",
							"\r",
							"//Test_1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//Test_2\r",
							"let Ajv = require(\"ajv\"),\r",
							"    ajv = new Ajv({logger: console});\r",
							"    schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"age\": {\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"daily_food\": {\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"daily_sleep\": {\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"name\": {\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"required\": [\r",
							"            \"age\",\r",
							"            \"daily_food\",\r",
							"            \"daily_sleep\",\r",
							"            \"name\"\r",
							"        ]\r",
							"    }\r",
							"pm.test(\"Schema is valid\", function(){\r",
							"    pm.expect(ajv.validate(schema, pm.response.json()))\r",
							"});\r",
							"\r",
							"\r",
							"//Test_3\r",
							"pm.test(\"Check_df\", function () {\r",
							"      pm.expect(jsonData.daily_food).to.eql(weight*0.012);\r",
							"});\r",
							"pm.test(\"Check_ds\", function () {\r",
							"      pm.expect(jsonData.daily_sleep).to.eql(weight*2.5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "2",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "4",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Kuzmich",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "#5_get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"//Test_1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//Test_2\r",
							"let Ajv = require(\"ajv\"),\r",
							"    ajv = new Ajv({logger: console});\r",
							"    schema = {\r",
							"        \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"number\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"number\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"number\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"number\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"    }\r",
							"pm.test(\"Schema is valid\", function(){\r",
							"    pm.expect(ajv.validate(schema, pm.response.json()))\r",
							"});\r",
							"\r",
							"//Test_3\r",
							"pm.test(\"Check_name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"\r",
							"//Test_4\r",
							"pm.test(\"Check_age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(pm.request.body.formdata.get(\"age\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Mary",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "#6_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const arr = pm.response.json();\r",
							"\r",
							"const randomElement = arr[Math.floor(Math.random() * arr.length)];\r",
							"//console.log(randomElement);\r",
							"\r",
							"let arr_cur = randomElement.Cur_ID;\r",
							"//console.log(arr_cur);\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", arr_cur);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "#7_curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}